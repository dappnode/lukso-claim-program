/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEPOSIT_AMOUNT"
      | "LUKSO_DEPOSIT_CONTRACT"
      | "addBeneficiaries"
      | "addressToIncentive"
      | "cancelIncentive"
      | "claimIncentive"
      | "claimTokens"
      | "incentiveDuration"
      | "initialize"
      | "owner"
      | "renewBeneficiaries"
      | "renounceOwnership"
      | "setIncentiveDuration"
      | "setValidatorNum"
      | "transferOwnership"
      | "validatorNum"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelIncentive"
      | "ClaimedIncentive"
      | "Initialized"
      | "NewIncentive"
      | "OwnershipTransferred"
      | "RenewIncentive"
      | "SetIncentiveDuration"
      | "SetValidatorNum"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LUKSO_DEPOSIT_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBeneficiaries",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToIncentive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncentive",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimIncentive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renewBeneficiaries",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorNum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorNum",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LUKSO_DEPOSIT_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorNum",
    data: BytesLike
  ): Result;
}

export namespace CancelIncentiveEvent {
  export type InputTuple = [addressArray: AddressLike[]];
  export type OutputTuple = [addressArray: string[]];
  export interface OutputObject {
    addressArray: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedIncentiveEvent {
  export type InputTuple = [beneficary: AddressLike];
  export type OutputTuple = [beneficary: string];
  export interface OutputObject {
    beneficary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewIncentiveEvent {
  export type InputTuple = [addressArray: AddressLike[]];
  export type OutputTuple = [addressArray: string[]];
  export interface OutputObject {
    addressArray: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewIncentiveEvent {
  export type InputTuple = [addressArray: AddressLike[]];
  export type OutputTuple = [addressArray: string[]];
  export interface OutputObject {
    addressArray: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIncentiveDurationEvent {
  export type InputTuple = [newIncentiveDuration: BigNumberish];
  export type OutputTuple = [newIncentiveDuration: bigint];
  export interface OutputObject {
    newIncentiveDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetValidatorNumEvent {
  export type InputTuple = [newValidatorNum: BigNumberish];
  export type OutputTuple = [newValidatorNum: bigint];
  export interface OutputObject {
    newValidatorNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Abi extends BaseContract {
  connect(runner?: ContractRunner | null): Abi;
  waitForDeployment(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEPOSIT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  LUKSO_DEPOSIT_CONTRACT: TypedContractMethod<[], [string], "view">;

  addBeneficiaries: TypedContractMethod<
    [addressArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  addressToIncentive: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { endTime: bigint; isClaimed: boolean }],
    "view"
  >;

  cancelIncentive: TypedContractMethod<
    [addressArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  claimIncentive: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  claimTokens: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  incentiveDuration: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_validatorNum: BigNumberish, _incentiveDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renewBeneficiaries: TypedContractMethod<
    [addressArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setIncentiveDuration: TypedContractMethod<
    [newIncentiveDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setValidatorNum: TypedContractMethod<
    [newValidatorNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validatorNum: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEPOSIT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LUKSO_DEPOSIT_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addBeneficiaries"
  ): TypedContractMethod<[addressArray: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressToIncentive"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { endTime: bigint; isClaimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelIncentive"
  ): TypedContractMethod<[addressArray: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimIncentive"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incentiveDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_validatorNum: BigNumberish, _incentiveDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renewBeneficiaries"
  ): TypedContractMethod<[addressArray: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncentiveDuration"
  ): TypedContractMethod<
    [newIncentiveDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidatorNum"
  ): TypedContractMethod<[newValidatorNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorNum"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CancelIncentive"
  ): TypedContractEvent<
    CancelIncentiveEvent.InputTuple,
    CancelIncentiveEvent.OutputTuple,
    CancelIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedIncentive"
  ): TypedContractEvent<
    ClaimedIncentiveEvent.InputTuple,
    ClaimedIncentiveEvent.OutputTuple,
    ClaimedIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewIncentive"
  ): TypedContractEvent<
    NewIncentiveEvent.InputTuple,
    NewIncentiveEvent.OutputTuple,
    NewIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RenewIncentive"
  ): TypedContractEvent<
    RenewIncentiveEvent.InputTuple,
    RenewIncentiveEvent.OutputTuple,
    RenewIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "SetIncentiveDuration"
  ): TypedContractEvent<
    SetIncentiveDurationEvent.InputTuple,
    SetIncentiveDurationEvent.OutputTuple,
    SetIncentiveDurationEvent.OutputObject
  >;
  getEvent(
    key: "SetValidatorNum"
  ): TypedContractEvent<
    SetValidatorNumEvent.InputTuple,
    SetValidatorNumEvent.OutputTuple,
    SetValidatorNumEvent.OutputObject
  >;

  filters: {
    "CancelIncentive(address[])": TypedContractEvent<
      CancelIncentiveEvent.InputTuple,
      CancelIncentiveEvent.OutputTuple,
      CancelIncentiveEvent.OutputObject
    >;
    CancelIncentive: TypedContractEvent<
      CancelIncentiveEvent.InputTuple,
      CancelIncentiveEvent.OutputTuple,
      CancelIncentiveEvent.OutputObject
    >;

    "ClaimedIncentive(address)": TypedContractEvent<
      ClaimedIncentiveEvent.InputTuple,
      ClaimedIncentiveEvent.OutputTuple,
      ClaimedIncentiveEvent.OutputObject
    >;
    ClaimedIncentive: TypedContractEvent<
      ClaimedIncentiveEvent.InputTuple,
      ClaimedIncentiveEvent.OutputTuple,
      ClaimedIncentiveEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewIncentive(address[])": TypedContractEvent<
      NewIncentiveEvent.InputTuple,
      NewIncentiveEvent.OutputTuple,
      NewIncentiveEvent.OutputObject
    >;
    NewIncentive: TypedContractEvent<
      NewIncentiveEvent.InputTuple,
      NewIncentiveEvent.OutputTuple,
      NewIncentiveEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RenewIncentive(address[])": TypedContractEvent<
      RenewIncentiveEvent.InputTuple,
      RenewIncentiveEvent.OutputTuple,
      RenewIncentiveEvent.OutputObject
    >;
    RenewIncentive: TypedContractEvent<
      RenewIncentiveEvent.InputTuple,
      RenewIncentiveEvent.OutputTuple,
      RenewIncentiveEvent.OutputObject
    >;

    "SetIncentiveDuration(uint256)": TypedContractEvent<
      SetIncentiveDurationEvent.InputTuple,
      SetIncentiveDurationEvent.OutputTuple,
      SetIncentiveDurationEvent.OutputObject
    >;
    SetIncentiveDuration: TypedContractEvent<
      SetIncentiveDurationEvent.InputTuple,
      SetIncentiveDurationEvent.OutputTuple,
      SetIncentiveDurationEvent.OutputObject
    >;

    "SetValidatorNum(uint256)": TypedContractEvent<
      SetValidatorNumEvent.InputTuple,
      SetValidatorNumEvent.OutputTuple,
      SetValidatorNumEvent.OutputObject
    >;
    SetValidatorNum: TypedContractEvent<
      SetValidatorNumEvent.InputTuple,
      SetValidatorNumEvent.OutputTuple,
      SetValidatorNumEvent.OutputObject
    >;
  };
}
